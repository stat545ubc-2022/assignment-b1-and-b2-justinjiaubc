suppressPackageStartupMessages(library(palmerpenguins))
suppressPackageStartupMessages(library(lubridate))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(testthat))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(gapminder))
suppressPackageStartupMessages(library(digest))

adelie <- penguins %>% 
  filter(species=="Adelie") %>% 
  drop_na()
max_minus_min <- function (x) {max(x)-min(x)}
answer1.0 <- max_minus_min(adelie$body_mass_g)

answer2.0 <- max_minus_min(gapminder$lifeExp)

answer3.0 <- function(x) {
  stopifnot(is.numeric(x)) 
  max(x) - min(x)
}

answer4.0 <- function(temp_F) {
  if(!is.numeric(temp_F)) {
    stop('I am so sorry, but this function only works for numeric input!\n',
         'You have provided an object of class: ', class(temp_F)[1])
  }
  temp_C <- (temp_F - 32) * 5 / 9
  return(temp_C)
}

answer5.0 <- function(x,y) {
  stopifnot(is.numeric(x) && is.numeric(y))
  result <- x^y
  paste(x, "raised to the power", y, "is", result)
}

x <- max(penguins$bill_length_mm, na.rm = TRUE) 
y <- min(penguins$bill_length_mm, na.rm = TRUE) 
x - y
# new function
max_minus_min2 <- function(x, na.rm = TRUE) {
  if(!is.numeric(x)) {
    stop('I am so sorry, but this function only works for numeric input!\n',
         'You have provided an object of class: ', class(x)[1])
  }
  max(x, na.rm = na.rm) - min(x, na.rm = na.rm)
}

answer6.0 <- expect_equal(x-y, max_minus_min2(penguins$bill_length_mm, na.rm = TRUE))

hello_world <- function(x) {
  stopifnot(is.character(x)) # we want x to be a character
  paste('Hello world, my name is', x)
}

hello_world("Julie Payette")

eggplants <- "Eggplants are purple"
a<-expect_match(eggplants, "Eggplants") # works
expect_match(eggplants, "purple") # works

answer7.0 <- test_that("returns hello world + your name string", {
  expect_match(hello_world("Justin"), "Justin")
})


m<- function(x,y, remove_na = TRUE, ...) {
  x*y
}
answer8.0 <- test_that("Testing multiplication function", {
  expect_equal(m(2,3),6)
  expect_equal(m(2,c(2,3)),c(4,6))
  expect_error(m(2, "3"), "non-numeric argument to binary operator")
})

answer9 <- penguins %>%
  across(summarise(everything()), ~sum(is.na(.x)) )
